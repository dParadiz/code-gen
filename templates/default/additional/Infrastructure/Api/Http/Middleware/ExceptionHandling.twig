<?php declare(strict_types=1);

namespace {{baseNamespace}}Infrastructure\Api\Http\Middleware;

use GuzzleHttp\Psr7\Response;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface;
use {{baseNamespace}}Infrastructure\Api\Http\Exception\BadRequest;
use {{baseNamespace}}Infrastructure\Api\Http\Exception\InternalServerError;
use {{baseNamespace}}Infrastructure\Api\Http\Exception\NotFoundException;

class ExceptionHandling implements MiddlewareInterface
{
    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface
    {
        try {
            return $handler->handle($request);
        } catch (BadRequest $e) {
            return new Response(
                400,
                [
                    'Content-Type' => 'application/json',
                ],
                json_encode([
                    'status'  => $e->getCode(),
                    'message' => $e->getMessage(),
                ])
            );
        } catch (NotFoundException $e) {
            return new Response(
                404,
                [
                    'Content-Type' => 'application/json',
                ],
                json_encode([
                    'status'  => $e->getCode(),
                    'message' => $e->getMessage(),
                ])
            );
        } catch (\Throwable|InternalServerError $e) {
            return new Response(
                500,
                [
                    'Content-Type' => 'application/json',
                ],
                json_encode([
                    'status'  => $e->getCode(),
                    'message' => $e->getMessage(),
                ])
            );
        }
    }
}
