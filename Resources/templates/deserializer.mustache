{{{ phpOpenTag }}}

namespace {{baseNamespace}}{{namespace}};

use Psr\Http\Message\ServerRequestInterface;
use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Serializer\Exception\MissingConstructorArgumentsException;
use Symfony\Component\Serializer\Exception\NotEncodableValueException;
use Symfony\Component\Validator\Validator\ValidatorInterface;
use Product\Http\Exception\BadRequest;
use Product\Http\Pipeline\Deserializer;
use {{baseNamespace}}Parameter;
use {{baseNamespace}}Model;

class {{className}} implements Deserializer
{
    public function __construct(
        private readonly ValidatorInterface $validator,{{#requestBody}}
        private readonly Serializer $serializer,{{/requestBody}}
    ) {}

    public function __invoke(ServerRequestInterface $request): array
    {
        $result = [];
        {{#requestParams}}
        $params = {{.}}::from($request);

        $errors = $this->validator->validate($params);
        if (count($errors) > 0) {
            $messages = [];
            foreach ($errors as $violation) {
                $messages[] = $violation->getMessage();
            }

            throw new BadRequest(implode('\n', $messages));
        }

        $result[] = $params;
        {{/requestParams}}
        {{#requestBody}}

        try {
            $model = $this->serializer->deserialize($request->getBody()->getContents(), {{.}}::class, 'json');
        } catch (MissingConstructorArgumentsException|NotEncodableValueException $e) {
            throw new BadRequest('Missing required data');
        }

        $errors = $this->validator->validate($model);
        if (count($errors) > 0) {
            $messages = [];
            foreach ($errors as $violation) {
                $messages[] = $violation->getMessage();
            }

            throw new BadRequest(implode('\n', $messages));
        }

        $result[] = $model;
        {{/requestBody}}

        return $result;
    }
}